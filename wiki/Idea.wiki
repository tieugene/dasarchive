#summary Key ideas.

  * Each file has per-file metadata and links to tags
  * tags are:
    * hiearchical
    * in taggroup
    * taggroup are context

= Another sight =
Simpler:
  * tags == folders
  * folders are nestable
  * some folders can't contain files
  * file can be in some folders in simultaneously

= Specification =

== Queries ==
  * set current folder
  * get used facets
  * get available subfolders

== DB structure ==
=== Nodes ===
  * */*
    * _parms_: None
    * _constraints_: None
  * *Facet*: _must_ contain Branch/Folder (1:M)
    * _parms_:
      * multiple:bool - multiple tags of this Facets can be applied to File
      * mandatory:bool=True
    * _constraints_: None
  * *Branch*: (fork/cross/junk/branch/intermediate) - _must_ contain Branch(1:M)/Folder(1:M).
    * _parms_:
    * _constraints_: None
      * oncreate: add 2+ edges of ...
  * *Folder*: _can_ contain File(M:M)/Facet(M:M)/Branch(1:M)/Folder(1:M)
    * _parms_: None
    * _constraints_: None
  * *File*:
    * _parms_:
      * size:int = 0
      * md5:uint128
      * filename:str
    * _constraints_: None
=== Edges ===
Compatibility matrix:
|| F\T    || / || Facet || Branch || Folder || File ||
|| /      || - || - || - || - || - ||
|| Facet  || - || - || - || - || - ||
|| Branch || - || - || - || - || - ||
|| Folder || - || - || - || - || - ||
|| File   || - || - || - || - || - ||
  ? / -> Tag
  * / -> TagGroup (1:M): the only edge from /; name = 'taggroup' (???).
  * TagGroup -> Tag (1:M): the only edge to Tag; name = 'include'.
  * Tag -> Tag (1:M): nested tags if File can be as in parent as in child tag (e.g. DocType -> DocSubType).
  * Tag -> TagGroup (?:M (!)): qualification; name='...' (or Taggroup -> Tag name="OnlyFor")
  * Tag -> File (M:M): name='tag (or file)'
==== depricated ====
  * TagGroup -> File
=== Resrictions ===
  * Tags structure is srictly hierachical.
  * Tag name is unique in its parent (TagGroup/Tag)
  * for multitags: File can't has as Tag as it's child/parent simultaneously
  * File can has any Tag from:
    * / childen Tags
    * sub-TagGroup from / to applied
=== Questions ===
  * Move TagGroup through hierarchy (up-down)
  * / is Tag?
  * Super-node Class? (Tag/File etc)
  * Really srict hierarchy of tags?
  * Must depricate X-tags upper then defined leveel (like - music tags and documens ones)
  * Maybe - tags have "compatibility table"?
  * == a kind of "scheme"
  * what about "SubClassOf" and "ChildOf" parameters? (RTFM RDF/OWL)
  * => SemaWeb :-)
  * Однако - DB independen

== UI ==

= Ideas =
  * TagGroup+Tag => Tag with "file=False" parm
  * TagGroup>Tag; Tag>TagGroup; Tag>Tag => Tag>Tag
  * File -> File (M:M): sequence.
  * File <-> File (M:M): X-link.
  * File sequence/X-links can't contain loops (a File can't be twice in sequence/X-links chains)
  * => File can be in one sequence and one X-links group (?)
  * folder parm: "OnlyFor": list of folders (with or without children) == Tag -> TagGroup
  * Other nodes: contact, task, address